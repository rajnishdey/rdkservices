{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/Thunder/master/Tools/JsonGenerator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "XCast API", 
        "class": "XCast", 
        "description": "This XCast plugin provides methods and events to support launching applications from an external source (for example, DIAL, Alexa, or WebPA). The RT implementation should use a RT service name that complies to the convention `com.comcast.<name>cast`. For example, `com.comcast.xdialcast` is used by `xdialserver`."
    },
    "definitions": {
        "enabled": {
            "summary":"`true` for enabled or `false` for disabled",
            "type":"boolean",
            "example": true
        },
        "applicationName": {
            "summary":"Registered application name",
            "type":"string",
            "example": "NetflixApp"
        },
        "applicationId":{
            "summary":"Application instance ID",
            "type":"string",
            "example":"1234"
        },
        "friendlyname": {
            "summary": "The friendly name of the implementation",
            "type": "string",
            "example": "xdial"
        },
        "standbybehavior": {
                        
            "summary": "whether to remain active or inactive during standby mode",
            "enum": [
                "active",
                "inactive"
            ],
            "type": "string",
            "example": "active"
        },
        "version": {
            "summary": "DIAL protocol version string",
            "type": "string",
            "example": "2.1 or 2.2.1 etc."
        },
        "result": {
            "type":"object",
            "properties": {
                "success": {
                    "$ref": "#/definitions/success"
                }
            },
            "required": [
                "success"
            ]
        },
        "success": {
            "summary": "Whether the request succeeded",
            "type": "boolean",
            "example": "true"
        }
    },
    "methods": {
        "getApiVersionNumber":{
            "summary": "Gets the API version.\n  \n### Events \n\n No Events",
            "result": {
                "type":"object",
                "properties": {
                    "version": {
                        "description": "a version number",
                        "type":"integer",
                        "example": 1
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                }, 
                "required": [
                    "version",
                    "success"
                ]               
            }
        },
        "getEnabled":{
            "summary": "Reports whether xcast is enabled or disabled.\n  \n### Events \n\n No Events",
            "result": {
                "type":"object",
                "properties": {
                    "enabled": {
                        "$ref": "#/definitions/enabled"
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                }, 
                "required": [
                    "enabled",
                    "success"
                ]               
            }
        },
        "getFriendlyName":{
            "summary": "Returns the friendly name set by setFriendlyName API.\n  \n### Events \n\n No Events",
            "result": {
                "type":"object",
                "properties": {
                    "friendlyname": {
                        "$ref": "#/definitions/friendlyname"
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                }, 
                "required": [
                    "friendlyname",
                    "success"
                ]               
            }
        },
        "getStandbyBehavior":{
            "summary": "Gets the expected xcast behavior in standby mode.\n  \n### Events \n\n No Events",
            "result": {
                "type":"object",
                "properties": {
                    "standbybehavior": {
                        "$ref": "#/definitions/standbybehavior"
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                }, 
                "required": [
                    "standbybehavior",
                    "success"
                ]               
            }
        },
        "getProtocolVersion":{
            "summary": "Return the DIAL protocol version supported by the server .\n  \n### Events \n\n No Events",
            "result": {
                "type":"object",
                "properties": {
                    "version": {
                        "$ref": "#/definitions/version"
                    },
                    "success": {
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "version",
                    "success"
                ]
            }
        },
        "onApplicationStateChanged":{
            "summary": "provides notification whenever an application changes state (due to user activity, an internal error, or other reasons). For singleton applications, the `applicationId` parameter is optional. If an application request is denied, fails to fulfill, or the state change is triggered by an internal error, a predefined error string should be included. This error may be translated to an XCast client.  \n Client Error Mapping Example:  \n| Error | Description | HTTP Status Codes |  \n | :-------- | :-------- | :-------- |   \n| `none` | The request (start/stop) is fulfilled successfully | HTTP 200 OK |  \n| `forbidden` | The user is not allowed to change the state of the application. This is not related to user account authentication of the native application | HTTP 403 Forbidden |  \n| `unavailable` | The target native application is not available on the device | HTTP 404 Not Found |  \n| `invalid` | The request is invalid (bad parameter for example) | HTTP 400 Bad Request |  \n| `internal` | The server failed to fulfill the request (server error) | HTTP 500 Internal |. \n  \n### Events \n\n No Events",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "state":{
                        "summary":"A predefined application state. Either `running` or `stopped`.",
                        "type":"string",
                        "example":"running"
                    },
                    "applicationId":{
                        "$ref": "#/definitions/applicationId"
                    },
                    "error":{
                        "summary":"A predefined error from the cast target application. Either `none`, `forbidden` `unavailable` `invalid` or `internal`",
                        "type":"string",
                        "example":""
                    }
                },
                "required": [
                    "applicationName",
                    "state"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "registerApplications": {
            "summary": "Registers an application. This allows to whitelist the apps which support dial service. To dynamically update the app list, same API should be called with the updated list.\n  \n### Events \n\n No Events",
            "params": {
                "type":"object",
                "properties": {
                    "applications": {
                        "summary": "The application name to register",
                        "type": "string",
                        "example": "NetflixApp"
                    }
                },
                "required": [
                    "applications"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "setEnabled":{
            "summary": "Enables or disables xcast.\n  \n### Events \n\n No Events",
            "params": {
                "type":"object",
                "properties": {
                    "enabled": {
                        "$ref": "#/definitions/enabled"
                    }
                },
                "required": [
                    "enabled"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "setFriendlyName":{
            "summary": "Sets the friendly name of device. It allows an application to override the default friendly name value with the friendly name passed as an argument.\n  \n### Events \n\n No Events",
            "params": {
                "type":"object",
                "properties": {
                    "friendlyname": {
                        "$ref": "#/definitions/friendlyname"
                    }
                },
                "required": [
                    "friendlyname"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "setStandbyBehavior":{
            "summary": "Sets the expected xcast behavior in standby mode. It allows an application to override controls on xcast behavior in standby mode. The default behavior in STANDBY mode is inactive, so client device can not discover the server. When STANDBY behavior is active, client device can discover the server.\n  \n### Events \n\n No Events",
            "params": {
                "type":"object",
                "properties": {
                    "standbybehavior": {
                        "$ref": "#/definitions/standbybehavior"
                    }
                },
                "required": [
                    "standbybehavior"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        }
    },
    "events": {
        "onApplicationHideRequest": {
            "summary": "Triggered when the cast service receives a hide request from a client. This is a request to hide an application from the foreground (suspend/run in background).  \nUpon hiding the application, the resident application is responsible for calling the `onApplicationStateChanged` method if hiding the application changes its running state.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        },
        "onApplicationLaunchRequest": {
            "summary": "Triggered when the cast service receives a launch request from a client. This is a request to launch an application. The resident application can determine if the application should be launched based on the current context. If the application is not already running, the requested application is started. If the application is already running and is in background mode, the requested application enters foreground mode (`optimus::running`, `xcast::running`). If the application is already in foreground mode, the request does not change the application state.  \nUpon launching the application, the resident application is responsible for calling the `onApplicationStateChanged` method, which sends the notification back to the XCast client (for example, `Dial`).",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "parameters": {
                        "summary":"The format and interpretation is determined between the application launcher or cast target and the cast client for each application. For example, a Netflix DIAL-client returns a `pluginURL` parameter with the application launch string. A Youtube DIAL-client returns a `url` parameter with the application launch string.",
                        "type":"object",
                        "properties": {
                            "pluginUrl":{
                                "summary":"Application launch string",
                                "type":"string",
                                "example": "https://www.netflix.com"
                            }
                        }
                    }
                },
                "required": [
                    "applicationName",
                    "parameters"
                ]
            }
        },
        "onApplicationResumeRequest": {
            "summary": "Triggered when the cast service receives a resume request from a client. This is a request to resume an application.  \nUpon resuming the application, the resident application is responsible for calling the `onApplicationStateChanged` method.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        },
        "onApplicationStateRequest": {
            "summary": "Triggered when the cast service needs an update of the application state.  \nThe resident application is responsible for calling the `onApplicationStateChanged` method indicating the current state.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        },
        "onApplicationStopRequest": {
            "summary": "Triggered when the cast service receives a stop request from a client. This is a request to stop an application. If the application is already running and either in foreground or background mode, then the requested application is destroyed (`optimus::destroyed`, `xcast::stopped`). If the application is not running, this request triggers an error `onApplicationStateChanged` message with `Invalid`.  \nUpon stopping the application, the resident application is responsible for calling the `onApplicationStateChanged` method.",
            "params": {
                "type":"object",
                "properties": {
                    "applicationName": {
                        "$ref": "#/definitions/applicationName"
                    },
                    "applicationId": {
                        "$ref": "#/definitions/applicationId"
                    }
                },
                "required": [
                    "applicationName",
                    "applicationId"
                ]
            }
        }
    }
}
